@page "/EditHeya"

@attribute [Authorize]

@using Data;

@implements IAsyncDisposable

@inject Microsoft.AspNetCore.Identity.SignInManager<Data.ApplicationUser> SignInManager
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<h3>EditHeya</h3>

<div class="table-responsive">
    <table class="table table-bordered">
        <tbody>
            @for(int y=0; y<10; y++)
            {
                <tr>
                    @for(int x=0; x<10; x++)
                    {
                        <td>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <div style="@CreateHeyaRootDivStyleAttribute()" @onclick="OnClickTableCell">
        @foreach(var heya in Heyas)
        {
            <div style="@CreateHeyaDivStyleAttribute(heya)" draggable="true" @ondragstart="async (e) => await OnDragStartTableCell(e, heya, DragModeType.Move)" @ondrag="OnDragTableCell" @ondragend="OnDragEndTableCell">
                <div class="top" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeTop(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="bottom" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeBottom(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="left" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeLeft(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="right" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeRight(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="top-left-direction-cross" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeTopLeftCross(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="top-right-direction-cross" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeTopRightCross(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="bottom-left-direction-cross" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeBottomLeftCross(e, heya)" @ondragstart:stopPropagation="true"></div>
                <div class="bottom-right-direction-cross" draggable="true" @ondragstart="async (e) => await OnDragStartTableCellResizeTopRightCross(e, heya)" @ondragstart:stopPropagation="true"></div>
            </div>
        }
    </div>
</div>

<button @onclick="OnClickSaveButton">Save</button>

@code {
    private enum DragModeType
    {
        None,
        Move,
        ResizeTop,
        ResizeBottom,
        ResizeLeft,
        ResizeRight,
        ResizeTopLeftCross,
        ResizeTopRightCross,
        ResizeBottomLeftCross,
        ResizeBottomRightCross,
    }

    private string? UserId { get; set; }
    private List<Heya> Heyas { get; set; } = new List<Heya>();
    private DragModeType CurrentDragModeType { get; set; }
    private Heya? CurrentDragHeya { get; set; }
    private IJSObjectReference? JavaScriptModule { get; set; }
    private int TableWidth { get; set; }
    private int TableHeight { get; set; }
    private int TableOffsetLeft { get; set; }
    private int TableOffsetTop { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);

        UserId = user.UserId.ToString();

        using var applicationDbContext = new ApplicationDbContext();

        Heyas = applicationDbContext.Heyas!.Where(heya => heya.Owner == UserId).ToList();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JavaScriptModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/EditHeya.js");

            TableOffsetLeft = await JavaScriptModule!.InvokeAsync<int>("getTableElementOffsetLeft");
            TableOffsetTop = await JavaScriptModule!.InvokeAsync<int>("getTableElementOffsetTop");
            TableWidth = await JavaScriptModule!.InvokeAsync<int>("getTableElementWidth");
            TableHeight = await JavaScriptModule!.InvokeAsync<int>("getTableElementHeight");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string CreateHeyaRootDivStyleAttribute()
    {
        return $"margin: {-TableHeight}px 0px 0px 0px; width: {TableWidth}px; height: {TableHeight}px; position: absolute";
    }

    private string CreateHeyaDivStyleAttribute(Heya heya)
    {
        return $"margin: {heya.Y * 10}vw 0px 0px {heya.X * 10}vw; width: {heya.Width * 10}vw; height: {heya.Height * 10}vw; position: relative";
    }

    private int OffsetToX(double offsetX)
    {
        return (int)(offsetX / (TableWidth / 10));
    }

    private int OffsetToY(double offsetY)
    {
        return (int)(offsetY / (TableHeight / 10));
    }

    private void OnClickTableCell(MouseEventArgs e)
    {
        Heyas.Add(new Heya() { Id = Guid.NewGuid(), Owner = UserId, Name = "", X = OffsetToX(e.OffsetX), Y = OffsetToY(e.OffsetY), Width = 1, Height = 1 });
    }

    private void OnDragTableCell(DragEventArgs e)
    {
        if (CurrentDragHeya == null)
        {
            return;
        }

        switch (CurrentDragModeType)
        {
            case DragModeType.Move:
                OnDragTableCellMove(e);
                break;

            case DragModeType.ResizeTop:
                OnDragTableCellResizeTop(e);
                break;

            case DragModeType.ResizeBottom:
                OnDragTableCellResizeBottom(e);
                break;

            case DragModeType.ResizeLeft:
                OnDragTableCellResizeLeft(e);
                break;

            case DragModeType.ResizeRight:
                OnDragTableCellResizeRight(e);
                break;

            case DragModeType.ResizeTopLeftCross:
                OnDragTableCellResizeTopLeftCross(e);
                break;

            case DragModeType.ResizeTopRightCross:
                OnDragTableCellResizeTopRightCross(e);
                break;

            case DragModeType.ResizeBottomLeftCross:
                OnDragTableCellResizeBottomLeftCross(e);
                break;

            case DragModeType.ResizeBottomRightCross:
                OnDragTableCellResizeBottomRightCross(e);
                break;
        }
    }

    private async Task OnDragStartTableCell(DragEventArgs e, Heya heya, DragModeType dragModeType)
    {
        CurrentDragHeya = heya;

        CurrentDragModeType = dragModeType;

        TableWidth = await JavaScriptModule!.InvokeAsync<int>("getTableElementWidth");
        TableHeight = await JavaScriptModule!.InvokeAsync<int>("getTableElementHeight");
    }

    private bool IsEnablePageValue(double pageX, double pageY)
    {
        int x = (int)pageX;
        int y = (int)pageY;

        return ((pageX != 0) || (pageY != 0));
    }

    private void OnDragTableCellMove(DragEventArgs e)
    {
        if (!IsEnablePageValue(e.PageX, e.PageY))
        {
            return;
        }

        int x = (int)((e.PageX - TableOffsetLeft) / (TableWidth / 10));
        int y = (int)((e.PageY - TableOffsetTop) / (TableHeight / 10));

        if (x >= 0)
        {
            CurrentDragHeya!.X = x;
        }

        if (y >= 0)
        {
            CurrentDragHeya!.Y = y;
        }
    }

    private void OnDragEndTableCell()
    {
        CurrentDragHeya = null;

        CurrentDragModeType = DragModeType.None;
    }

    private async Task OnDragStartTableCellResizeTop(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeTop);
    }

    private async Task OnDragStartTableCellResizeBottom(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeBottom);
    }

    private async Task OnDragStartTableCellResizeLeft(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeLeft);
    }

    private async Task OnDragStartTableCellResizeRight(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeRight);
    }

    private async Task OnDragStartTableCellResizeTopLeftCross(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeTopLeftCross);
    }

    private async Task OnDragStartTableCellResizeTopRightCross(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeTopRightCross);
    }

    private async Task OnDragStartTableCellResizeBottomLeftCross(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeBottomLeftCross);
    }

    private async Task OnDragStartTableCellResizeBottomRightCross(DragEventArgs e, Heya heya)
    {
        await OnDragStartTableCell(e, heya, DragModeType.ResizeBottomRightCross);
    }

    private void OnDragTableCellResizeLeft(DragEventArgs e)
    {
        if (!IsEnablePageValue(e.PageX, e.PageY))
        {
            return;
        }

        var x = (int)((e.PageX - TableOffsetLeft) / (TableWidth / 10));

        if (x != CurrentDragHeya!.X)
        {
            var width = CurrentDragHeya.Width + (CurrentDragHeya.X - x);

            if (width > 0)
            {
                CurrentDragHeya.Width = width;
                CurrentDragHeya.X = x;
            }
        }
    }

    private void OnDragTableCellResizeRight(DragEventArgs e)
    {
        if (!IsEnablePageValue(e.PageX, e.PageY))
        {
            return;
        }

        var x = (int)((e.PageX - TableOffsetLeft) / (TableWidth / 10));

        if (x != CurrentDragHeya!.X)
        {
            var width = (x - CurrentDragHeya.X);

            if (width > 0)
            {
                CurrentDragHeya.Width = width;
            }
        }
    }

    private void OnDragTableCellResizeTop(DragEventArgs e)
    {
        if (!IsEnablePageValue(e.PageX, e.PageY))
        {
            return;
        }

        var y = (int)((e.PageY - TableOffsetTop) / (TableHeight / 10));

        if (y != CurrentDragHeya!.Y)
        {
            var height = CurrentDragHeya.Height + (CurrentDragHeya.Y - y);

            if (height > 0)
            {
                CurrentDragHeya.Height = height;
                CurrentDragHeya.Y = y;
            }
        }
    }

    private void OnDragTableCellResizeBottom(DragEventArgs e)
    {
        if (!IsEnablePageValue(e.PageX, e.PageY))
        {
            return;
        }

        var y = (int)((e.PageY - TableOffsetTop) / (TableHeight / 10));

        if (y != CurrentDragHeya!.Y)
        {
            var height = (y - CurrentDragHeya.Y);

            if (height > 0)
            {
                CurrentDragHeya.Height = height;
            }
        }
    }

    private void OnDragTableCellResizeTopLeftCross(DragEventArgs e)
    {
        OnDragTableCellResizeLeft(e);
        OnDragTableCellResizeTop(e);
    }

    private void OnDragTableCellResizeTopRightCross(DragEventArgs e)
    {
        OnDragTableCellResizeRight(e);
        OnDragTableCellResizeTop(e);
    }

    private void OnDragTableCellResizeBottomLeftCross(DragEventArgs e)
    {
        OnDragTableCellResizeLeft(e);
        OnDragTableCellResizeBottom(e);
    }

    private void OnDragTableCellResizeBottomRightCross(DragEventArgs e)
    {
        OnDragTableCellResizeRight(e);
        OnDragTableCellResizeBottom(e);
    }

    private void OnClickSaveButton()
    {
        _navigationManager.NavigateTo($"/{UserId}");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (JavaScriptModule is not null)
        {
            await JavaScriptModule.DisposeAsync();
        }
    }
}

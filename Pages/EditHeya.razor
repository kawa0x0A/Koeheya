@page "/EditHeya"

@attribute [Authorize]

@using Data;

@implements IAsyncDisposable

@inject Microsoft.AspNetCore.Identity.SignInManager<Data.ApplicationUser> SignInManager
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<h3>EditHeya</h3>

<table class="table table-bordered table-responsive">
    <tbody>
        @for(int y=0; y<10; y++)
        {
            var captureY = y;
            <tr>
                @for(int x=0; x<10; x++)
                {
                    var captureX = x;

                    <td class="@TableUtility.HeyaTableDataAttribute(Heyas, x, y)" @onclick="() => OnClickTableCell(captureX, captureY)" draggable="true" @ondragstart="() => OnDragStartTableCell(captureX, captureY)" @ondrag="OnDragTableCell" @ondragend="OnDragEndTableCell">
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<button @onclick="OnClickSaveButton">Save</button>

@code {
    private string? UserId { get; set; }
    private List<Heya> Heyas { get; set; } = new List<Heya>();
    private Heya? CurrentDragHeya { get; set; }
    private IJSObjectReference? Module { get; set; }
    private int TableOffsetLeft { get; set; }
    private int TableOffsetTop { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);

        UserId = user.UserId.ToString();

        using var applicationDbContext = new ApplicationDbContext();

        Heyas = applicationDbContext.Heyas!.Where(heya => heya.Owner == UserId).ToList();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/EditHeya.js");

            TableOffsetLeft = await Module!.InvokeAsync<int>("getTableElementOffsetLeft");
            TableOffsetTop = await Module!.InvokeAsync<int>("getTableElementOffsetTop");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnClickTableCell(int x, int y)
    {
        Heyas.Add(new Heya() { Id = Guid.NewGuid(), Owner = UserId, Name = "", X = x, Y = y, Width = 1, Height = 1 });
    }

    private void OnDragStartTableCell(int x, int y)
    {
        CurrentDragHeya = Heyas.SingleOrDefault(heya => ((heya.X <= x) && (x < heya.X + heya.Width) && (heya.Y <= y) && (y < heya.Y + heya.Height)));
    }

    private async void OnDragTableCell(DragEventArgs e)
    {
        int tableWidth = await Module!.InvokeAsync<int>("getTableElementWidth");
        int tableHeight = await Module!.InvokeAsync<int>("getTableElementHeight");

        if (CurrentDragHeya == null)
        {
            return;
        }

        CurrentDragHeya.X = (int)((e.PageX - TableOffsetLeft) / (tableWidth / 10));
        CurrentDragHeya.Y = (int)((e.PageY - TableOffsetTop) / (tableHeight / 10));
    }

    private void OnDragEndTableCell()
    {
        CurrentDragHeya = null;
    }

    private void OnClickSaveButton()
    {
        _navigationManager.NavigateTo($"/{UserId}");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (Module is not null)
        {
            await Module.DisposeAsync();
        }
    }
}

@page "/Account/Setting"

@attribute [Authorize]

@inject Microsoft.AspNetCore.Identity.SignInManager<Data.ApplicationUser> SignInManager
@inject NavigationManager _navigationManager

<h3>Setting</h3>

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
    </symbol>
</svg>
<div>
    <button class="btn btn-danger" data-toggle="collapse" data-target="#collapse" aria-expanded="false">Delete Account</button>
    <div class="collapse" id="collapse">
        <div class="card">
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <svg class="bi flex-shrink-0 me-2" width="24" height="24"><use xlink:href="#triangle-fill"/></svg>
                <div>
                    Delete Account
                    <div>
                        <div class="input-group flex-nowrap">
                            <span class="input-group-text" id="addon-wrapping">@@</span>
                            <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="addon-wrapping" @oninput="@((ChangeEventArgs e) => OnAccountNameTextChanged(e.Value?.ToString()))">
                        </div>
                        <button disabled="@IsDisableDeleteButton" @onclick="OnExecuteDeleteAccount">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsDisableDeleteButton { get; set; } = true;

    private void OnAccountNameTextChanged(string? value)
    {
        var userName = SignInManager.Context.User.Identity?.Name;

        IsDisableDeleteButton = (userName != value);
    }

    private async Task OnExecuteDeleteAccount()
    {
        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);

        using var applicationDbContext = new Data.ApplicationDbContext();

        applicationDbContext.ApplicationUsers?.Remove(user);

        await applicationDbContext.SaveChangesAsync();

        _navigationManager.NavigateTo("Identity/Account/Logout?", true);
    }
}
